generate migration scripts:

npm run typeorm migration:generate -- -n mig00

run migration 

npm run typeorm migration:run -- 

// to serverless
npm install --save apollo-server-lambda graphql
npm install -g serverless
npm install --save-dev serverless-webpack webpack webpack-node-externals ts-loader
npm install --save-dev serverless-dotenv-plugin
 npm install --save-dev serverless-offline

// deploy to aws lambda
serverless deploy --stage prod

// deploy serverless locally:
serverless offline start


Lendis Tech Test (via Calendly) <notifications@calendly.com>
À :
patrice.loos@yahoo.com

lun. 2 mai à 13 h 00

Hi Patrice,



Thank you for making the time to do the test, we hope that you enjoy it.



You have 2 hours to complete as much of the test as you can.



Please do not take more than 2 hours to do the test and make sure you ZIP it and send it back to us via https://lendis-tech-test.wetransfer.com.



Do not worry too much about completing everything.

If you run out of time feel free to include any design notes indicating how you were planning to approach the remaining implementation.



Also note that any node modules (if applicable) should be removed before zipping your work.



The Task



The task is to create a program that simulates a one-player game of the card game Pelmanism ('Pairs'), with your program as the player.



The game should be played with a deck of 54 playing cards, comprised of 52 standard cards and 2 jokers.



It's a self playing game, that when initiated will run to completion with no user input.



When played by a human with real cards, all the cards are face-down.

The player picks pairs randomly, one card at a time.

If the two cards are equivalent, they can be removed and placed in the bank.

If they are not equivalent, they are put back where they came from, face-down.



Decent players will remember the value of previously-seen unmatched cards - so if the player picks a 7 and a 9, they won't match - but later, when he/she picks a new pair and the first card is a 7, he/she will remember that another 7 has been seen in a different location, and pick that to form a matching pair.



There is no expectation that there will be any UI created for this task, but a simple console output showing progress throughout the game would be welcome.



We recommend breaking the task down as follows...



Design a class (or classes) to represent playing cards

-----------------------------------------------------------------------------



A playing card may be a standard card or a joker.

A standard card has a suit which is: Heart, Diamond, Spade or Club

A standard card has a value which is: 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King or Ace

A joker has no suit.



You should provide a suitable constructor for a card.



A card object should be able to print a representation of itself, in the form of "Ace of Hearts", "7 of Spades", "King of Diamonds", etc.



Define a means of checking the value-equivalence of cards



Write a function which decides if two cards are equivalent.

Two cards are equivalent if they have the same value, or if either card is a joker.



Generate a pack of cards

-------------------------------------



A pack of cards comprises each of the thirteen values (2, 3... King, Ace) in each of the four suits - plus two jokers.



Shuffle the cards

-------------------------



At the start of the game, shuffle your 54 cards into a reasonably random order.

Pick as many pairs as you can find





Technical Considerations



You are required to use TypeScript throughout this exercise, unless you have a prior agreement to use an alternative.



The work to satisfy this challenge must be written within this 2 hour timeframe.



The choice of any state management library (if any) is up to you, as are those for providing the look and feel.



You may use any appropriate testing library if you are including test cases in your submission.



The use of any libraries or frameworks is at your discretion but you are advised that the core functionality should be your own work.



Good luck with the test

Calendly
Sign up for your own Calendly page






